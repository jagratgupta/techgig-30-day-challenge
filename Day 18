// Day 18 : Minimum effort - Maximum output

import java.io.*;
import java.util.*;
import java.util.Scanner;
import java.util.Arrays;

public class CandidateCode {
    public static void main(String args[] ) throws Exception {

        Scanner sc = new Scanner(System.in);
         int n = sc.nextInt();
        int i;
        int arr[] = new int[n];
        int arr1[]= new int[n];
        String str="";
        for( i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
           
        }

int j = 0, k = n-1, max, min; 
		
	// We will move from left to right and find
    // the first element which is greater than the next element
	for (j = 0; j < n-1; j++) 
	{ 
		if (arr[j] > arr[j+1]) 
		break; 
	} 
	if (j == n-1) 
	{ 
		System.out.println("The complete array is sorted"); 
		return; 
	} 
		
	// We will check  from right to left  and find
    // the first element which is smaller than the next element
	for(k = n - 1; k > 0; k--) 
	{ 
		if(arr[k] < arr[k-1]) 
		break; 
	} 

//Finding the minimum and max element of unsorted array
    max = arr[j];
    min = arr[j]; 
	for(i = j + 1; i <= k; i++) 
	{ 
		if(arr[i] > max) 
		max = arr[i]; 
		if(arr[i] < min) 
		min = arr[i]; 
	} 
// Find the first element (if there is any) in arr[0..j-1] which is greater than min,
// change j to index of this element.
    for( i = 0; i < j; i++) 
	{ 
		if(arr[i] > min) 
		{ 
		j = i; 
		break; 
		}	 
	} 
		
// Find the last element (if there is any) in arr[e+1..n-1] which is smaller than max, 
//change e to index of this element	
	for( i = n -1; i >= k+1; i--) 
	{ 
		if(arr[i] < max) 
		{ 
		k = i; 
		break; 
		} 
	} 
			
	// step 3 of above algo 
/*	System.out.println(" The unsorted subarray which"+ 
						" makes the given array sorted lies"+ 
					" between the indices "+s+" and "+e); 
                    */
      for(i=j;i<=k;i++)
      {
          if(i==k)
            System.out.print(arr[i]+"");
          else
            System.out.print(arr[i]+" ");
      }


   }
}
